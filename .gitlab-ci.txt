stages:
- "test"
- "clean"
- "build"
- "staging"
- "deploy"
- "stop"

.initial-setup:
  stage: test
  image: python:3.10.8-slim-buster
  tags:
  - kubernetes-runner
  - docker-runner
  except:
  - tags
  variables:
    PIP_DEFAULT_TIMEOUT: 300
  before_script:
  - pip install poetry==1.1.7
  - poetry config virtualenvs.create false
  - poetry install

black:
  when: manual
  extends:
  - .initial-setup
  script:
  - black --check .

flake8:
  when: manual
  extends:
  - .initial-setup
  script:
  - flake8 --count .

mypy:
  when: manual
  extends:
  - .initial-setup
  script:
  - mypy .

pytest:
  when: manual
  extends:
  - .initial-setup
  services:
  - name: postgres:13.8-bullseye
    alias: database
  variables:
    # Postgresql variables
    SLACK_FASTAPI_DB_HOST: database
    POSTGRES_PASSWORD: slack_fastapi
    POSTGRES_USER: slack_fastapi
    POSTGRES_DB: slack_fastapi
  script:
  - apt update
  - apt install -y wait-for-it
  - wait-for-it -t 180 $SLACK_FASTAPI_DB_HOST:5432
  - pytest -vv --junitxml=report.xml --cov="slack_fastapi" .
  - coverage xml
  artifacts:
    when: always
    reports:
      junit: report.xml

stage-clean:
  when: manual
  stage: clean
  image: docker:20.10.16
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
  - stage-runner
  environment:
    name: staging
    action: stop
  before_script:
  - if [ -n "$STAGE_ENV" ]; then mv $STAGE_ENV .env; fi
  script:
  - docker compose -f deploy/docker-compose.stage.yml --project-directory . down

clean:
  stage: clean
  image: docker:20.10.16
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
  - deploy-runner
  environment:
    name: production
  before_script:
  - if [ -n "$ENV" ]; then mv $ENV .env; fi
  script:
  - docker compose -f deploy/docker-compose.yml --project-directory . down

.pre-stage-build:
  before_script:
  - if [ -n "$STAGE_ENV" ]; then mv $STAGE_ENV .env; fi
  - >
    sed -i "s/8000:8000/$DEPLOY_APP_HOST:$DEPLOY_APP_PORT:8000/" deploy/docker-compose.stage.yml

stage-build:
  when: manual
  stage: build
  image: docker:20.10.16
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
  - stage-runner
  environment:
    name: staging
    url: $STAGE_URL
  extends:
  - .pre-stage-build
  script:
  - docker compose -f deploy/docker-compose.stage.yml --project-directory . build

.pre-build:
  before_script:
  - if [ -n "$ENV" ]; then mv $ENV .env; fi
  - >
    sed -i "s/8000:8000/$DEPLOY_APP_HOST:$DEPLOY_APP_PORT:8000/" deploy/docker-compose.yml
  - >
    sed -i "s/8432:5432/$DEPLOY_DB_HOST:$DEPLOY_DB_PORT:5432/" deploy/docker-compose.yml

# .build-template: &build_definition
#   image:
#     name: gcr.io/kaniko-project/executor:latest
#     entrypoint: [""]
#   script:
#   - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#   - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/deploy/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

# build:
#   stage: build
#   image:
#     name: gcr.io/kaniko-project/executor:v1.14.0-debug
#     entrypoint: [""]
#   script:
#     - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}" > /kaniko/.docker/config.json
#     - /kaniko/executor
#       --context "${CI_PROJECT_DIR}"
#       --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
#       --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
#   rules:
#     - if: $CI_COMMIT_TAG

build:
  stage: build
  image: docker:20.10.16
  services:
  - docker:dind
  tags:
  - deploy-runner
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    # Set these variables in GitLab CI/CD settings
    CI_REGISTRY_USER: $CI_REGISTRY_USER
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  environment:
    name: production
    url: $DEPLOY_URL
  needs: ["clean"]
  extends:
  - .pre-build
  script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  - docker-compose -f deploy/docker-compose.yml --project-directory . build
  - docker-compose -f deploy/docker-compose.yml --project-directory . push slack_fastapi

staging:
  when: manual
  stage: staging
  image: docker:20.10.16
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  needs: ["stage-build"]
  tags:
  - stage-runner
  environment:
    name: staging
    url: $STAGE_URL
    on_stop: stage-stop
  extends:
  - .pre-stage-build
  script:
  - docker compose -f deploy/docker-compose.stage.yml --project-directory . up -d

deploy:
  stage: deploy
  image: docker:20.10.16
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  needs: ["build"]
  tags:
  - deploy-runner
  environment:
    name: production
    url: $DEPLOY_URL
    on_stop: stop
  extends:
  - .pre-build
  script:
  - docker compose -f deploy/docker-compose.yml --project-directory . up -d

# __APP_IMAGE__ is what will ba passed to app.yml for deployment
# create service account and save kube_config as KUBE_CONFIG protected ans masked file variable, then deploy to k8s:
# deploy:
#   stage: deploy
#   image: bitnami/kubectl:latest
#   script:
#     - echo "$KUBE_CONFIG" > kubeconfig
#     - export KUBECONFIG=kubeconfig
#     - sed -i "s|__APP_IMAGE__|${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}|g" k8s/app.yml
#     - kubectl apply -f k8s/app.yml
#   tags:
#     - kubernetes-runner
#   environment:
#     name: production

stage-stop:
  when: manual
  stage: stop
  image: docker:20.10.16
  tags:
  - stage-runner
  environment:
    name: staging
    action: stop
  before_script:
  - if [ -n "$STAGE_ENV" ]; then mv $STAGE_ENV .env; fi
  script:
  - docker compose -f deploy/docker-compose.stage.yml --project-directory . down

stop:
  when: manual
  stage: stop
  image: docker:20.10.16
  tags:
  - deploy-runner
  environment:
    name: production
    action: stop
  before_script:
  - if [ -n "$ENV" ]; then mv $ENV .env; fi
  script:
  - docker compose -f deploy/docker-compose.yml --project-directory . down
